#lang racket
(require rnrs/mutable-pairs-6)
#;(define (cons x y)
    (let ((new (get-new-pair)))
      (set-car! new x)
      (set-cdr! new y)
      new))


;3.12
(define (append! x y)
  (set-mcdr! (last-pair x) y)
  x)

(define (last-pair x)
  (if (null? (mcdr x)) x (last-pair (mcdr x))))

;(define x (list 'a 'b))
;(define y (list 'c 'd))
;(define z (append x y))
;(cdr x)
;'(b)

;(define x (mcons 'a (mcons 'b '())))
;(define y (mcons 'c (mcons 'd '())))
;(define w (append! x y))
;(mcdr x)
;(mcons 'b (mcons 'c (mcons 'd '())))